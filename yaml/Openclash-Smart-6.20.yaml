# 七尺宇 + 安格世界，C❄️ OpenClash配置整合-18 , 2025-6-19
# 七尺宇: https://www.youtube.com/@qichiyu
# 安格世界: https://www.youtube.com/@Ange-Digital-Life
# openclash设置和配置教程: https://www.youtube.com/watch?v=S2l_0g4EOHk&t
# sub-store设置和配置教程: https://www.youtube.com/watch?v=bqEFhWHG0dg
# 注意规则在满足自己需求情况下，尽量做到精简，不要过度复杂，以免影响性能。
# ⭐️⭐️如果遇到无法识别smart策略组则，需要更新openclash内核才能使用此配置。SSH连接OpenWrt后，输入下方内容(一定要删掉#   #后面有空格)，然后手动更新。注意手动更新后，，不要在openclash再次更新内核。
# wget -O smartcore.sh --no-check-certificate https://github.com/666OS/YYDS/raw/main/JS/smartcore.sh && chmod +x smartcore.sh && ./smartcore.sh
# ⭐️⭐️smart策略组必须要需要模型，下载下方链接内Model.bin（打开链接往下拉能看到）文件放到OpenClash: (/etc/openclash/Model.bin)，如果不想用模型：uselightgbm: true,collectdata: true,  智能策略组的这两个参数改成false
# https://github.com/vernesong/mihomo/releases

# 机场订阅
proxy-providers:
  聚合机场:
    url: "订阅链接4"
    type: http
    interval: 86400
    health-check:
      enable: true
      url: https://www.gstatic.com/generate_204
      interval: 300
    proxy: 直连
    override:
      additional-prefix: "[自建] " # 给此机场机场-B的节点头部加名字，引号内名字可以改。

  Airport_01:
    url: "订阅链接1"
    type: http
    interval: 86400
    health-check:
      enable: true
      url: https://www.gstatic.com/generate_204
      interval: 300
    proxy: 直连

  Airport_02:
    url: "订阅链接2"
    type: http
    interval: 86400
    health-check:
      enable: true
      url: https://www.gstatic.com/generate_204
      interval: 300
    proxy: 直连

  Airport_03:
    url: "订阅链接3"
    type: http
    interval: 86400
    health-check:
      enable: true
      url: https://www.gstatic.com/generate_204
      interval: 300
    proxy: 直连

# 多机场复制上方内容后改名字和url订阅链接即可,不能重复
# 节点信息
proxies:
  - {name: 直连, type: direct}

# 全局配置
port: 7890
socks-port: 7891
redir-port: 7892
mixed-port: 7893
tproxy-port: 7895

allow-lan: true
mode: rule
log-level: info

ipv6: true

find-process-mode: 'off'
# interface-name: en0
global-client-fingerprint: chrome
keep-alive-idle: 600
keep-alive-interval: 15
disable-keep-alive: false

# 控制面板
external-controller: 0.0.0.0:9090
external-ui: ui
external-ui-name: zashboard
external-ui-url: https://github.com/Zephyruso/zashboard/archive/refs/heads/gh-pages.zip
secret: "123456"

# DNS模块
dns:
  enable: true
  listen: 0.0.0.0:7874
  ipv6: true
  prefer-h3: false # 是否开启 DoH 支持 HTTP/3，将并发尝试
  respect-rules: true
  enhanced-mode: fake-ip
  fake-ip-range: 198.20.0.1/16
  default-nameserver:
    - 223.5.5.5
    - 119.29.29.29
  proxy-server-nameserver:
    - quic://dns.alidns.com/dns-query
    - https://sm2.doh.pub/dns-query
  direct-nameserver:
    - quic://dns.alidns.com/dns-query
    - https://sm2.doh.pub/dns-query
  nameserver:
    - https://dns.google/dns-query
    - https://dns.cloudflare.com/dns-query
  fake-ip-filter:
    - "rule-set:fake-ip-filter,private_domain,cn_domain"
    #- +.qeayr.cn
    #- +.saojc.xyz
    #- +.sssyun.xyz
    #- +.dler.cloud
    #- +.0tk8a3a1q4t94dler.com
    #- +.aerianas.top
    #- '*.lan'               # 局域网设备（如 router.lan）
    #- '*.local'             # mDNS 服务（如 printer.local）
    #- 'time.*.com'          # 时间服务器（如 time.apple.com）
    - '*.steamcontent.com'  # Steam 更新域名
    - '*.nflxvideo.net'     # Netflix CDN
    - '*.bt-tracker.*'      # BT Tracker 服务器
    - 'localhost'
    - '*.msftconnecttest.com' # Windows 网络检测
    - '*.miwifi.com'

# 入站
tun:
  enable: true
  stack: gvisor
  device: utun
  endpoint-independent-nat: true
  auto-route: false
  auto-detect-interface: false
  auto-redirect: false
  strict-route: false

profile:
  store-selected: true
  store-fake-ip: true

# 出站策略
# 注意锚点必须放在引用的上方，可以集中把锚点全部放yaml的顶部。
pr: &pr {type: select, proxies: [🚀 默认代理, ♻️ 香港自动, ♻️ 日本自动, ♻️ 美国自动, ♻️ 新国自动, ♻️ 韩国自动, ♻️ 台湾自动, ♻️ 欧洲自动, ♻️ 自动选择, ⭐ 香港智能, ⭐ 日本智能, ⭐ 美国智能, ⭐ 新国智能, ⭐ 韩国智能, ⭐ 台湾智能, ⭐ 欧洲智能, 🔒 港区-稳定IP, 🔒 日本-稳定IP, 🔒 美国-稳定IP, 🔒 新国-稳定IP, 🔒 韩国-稳定IP, 🔒 台湾-稳定IP, 🔒 欧洲-稳定IP, 🇭🇰 香港节点, 🇯🇵 日本节点, 🇸🇬 新国节点, 🇺🇲 美国节点, 🇰🇷 韩国节点, 🇹🇼 台湾节点, 🇩🇪🇫🇷🇬🇧 欧洲节点, 🔯 香港故转, 🔯 日本故转, 🔯 美国故转, 🔯 新国故转, 🔯 韩国故转, 🔯 台湾故转, 🔯 欧洲故转, 🌍 其他节点, 自建/家宽节点, 🌐 全部节点, 直连]}
pr_b: &pr_b {type: select, proxies: [♻️ 香港自动, ♻️ 日本自动, ♻️ 美国自动, ♻️ 新国自动, ♻️ 韩国自动, ♻️ 台湾自动, ♻️ 欧洲自动, ♻️ 自动选择, ⭐ 香港智能, ⭐ 日本智能, ⭐ 美国智能, ⭐ 新国智能, ⭐ 韩国智能, ⭐ 台湾智能, ⭐ 欧洲智能, 🔒 港区-稳定IP, 🔒 日本-稳定IP, 🔒 美国-稳定IP, 🔒 新国-稳定IP, 🔒 韩国-稳定IP, 🔒 台湾-稳定IP, 🔒 欧洲-稳定IP, 🇭🇰 香港节点, 🇯🇵 日本节点, 🇸🇬 新国节点, 🇺🇲 美国节点, 🇰🇷 韩国节点, 🇹🇼 台湾节点, 🇩🇪🇫🇷🇬🇧 欧洲节点, 🔯 香港故转, 🔯 日本故转, 🔯 美国故转, 🔯 新国故转, 🔯 韩国故转, 🔯 台湾故转, 🔯 欧洲故转, 🌍 其他节点, 自建/家宽节点, 🌐 全部节点, 直连]}
pr_c: &pr_c {type: select, proxies: [直连, ♻️ 香港自动, ♻️ 日本自动, ♻️ 美国自动, ♻️ 新国自动, ♻️ 韩国自动, ♻️ 台湾自动, ♻️ 欧洲自动, ♻️ 自动选择, ⭐ 香港智能, ⭐ 日本智能, ⭐ 美国智能, ⭐ 新国智能, ⭐ 韩国智能, ⭐ 台湾智能, ⭐ 欧洲智能, 🔒 港区-稳定IP, 🔒 日本-稳定IP, 🔒 美国-稳定IP, 🔒 新国-稳定IP, 🔒 韩国-稳定IP, 🔒 台湾-稳定IP, 🔒 欧洲-稳定IP, 🇭🇰 香港节点, 🇯🇵 日本节点, 🇸🇬 新国节点, 🇺🇲 美国节点, 🇰🇷 韩国节点, 🇹🇼 台湾节点, 🇩🇪🇫🇷🇬🇧 欧洲节点, 🔯 香港故转, 🔯 日本故转, 🔯 美国故转, 🔯 新国故转, 🔯 韩国故转, 🔯 台湾故转, 🔯 欧洲故转, 🌍 其他节点, 自建/家宽节点, 🌐 全部节点]}

proxy-groups:
  - {name: 🚀 默认代理, <<: *pr_b}
  - {name: 🤖 Ai, type: select, include-all: true, proxies: [🚀 默认代理, ♻️ 香港自动, ♻️ 日本自动, ♻️ 美国自动, ♻️ 新国自动, ♻️ 韩国自动, ♻️ 台湾自动, ♻️ 欧洲自动, ♻️ 自动选择, ⭐ 香港智能, ⭐ 日本智能, ⭐ 美国智能, ⭐ 新国智能, ⭐ 韩国智能, ⭐ 台湾智能, ⭐ 欧洲智能, 🔒 港区-稳定IP, 🔒 日本-稳定IP, 🔒 美国-稳定IP, 🔒 新国-稳定IP, 🔒 韩国-稳定IP, 🔒 台湾-稳定IP, 🔒 欧洲-稳定IP, 🇭🇰 香港节点, 🇯🇵 日本节点, 🇸🇬 新国节点, 🇺🇲 美国节点, 🇰🇷 韩国节点, 🇹🇼 台湾节点, 🇩🇪🇫🇷🇬🇧 欧洲节点, 🔯 香港故转, 🔯 日本故转, 🔯 美国故转, 🔯 新国故转, 🔯 韩国故转, 🔯 台湾故转, 🔯 欧洲故转, 自建/家宽节点]}
  - {name: 📲 Telegram, type: select, include-all: true, proxies: [🚀 默认代理, ♻️ 香港自动, ♻️ 日本自动, ♻️ 美国自动, ♻️ 新国自动, ♻️ 韩国自动, ♻️ 台湾自动, ♻️ 欧洲自动, ♻️ 自动选择, ⭐ 香港智能, ⭐ 日本智能, ⭐ 美国智能, ⭐ 新国智能, ⭐ 韩国智能, ⭐ 台湾智能, ⭐ 欧洲智能, 🔒 港区-稳定IP, 🔒 日本-稳定IP, 🔒 美国-稳定IP, 🔒 新国-稳定IP, 🔒 韩国-稳定IP, 🔒 台湾-稳定IP, 🔒 欧洲-稳定IP, 🇭🇰 香港节点, 🇯🇵 日本节点, 🇸🇬 新国节点, 🇺🇲 美国节点, 🇰🇷 韩国节点, 🇹🇼 台湾节点, 🇩🇪🇫🇷🇬🇧 欧洲节点, 🔯 香港故转, 🔯 日本故转, 🔯 美国故转, 🔯 新国故转, 🔯 韩国故转, 🔯 台湾故转, 🔯 欧洲故转, 自建/家宽节点]}
  - {name: 📹 YouTube, <<: *pr}
  - {name: 🍀 Google, <<: *pr}
  - {name: 🐦 Twitter(X), <<: *pr}
  - {name: 👨🏿‍💻 GitHub, <<: *pr}
  - {name: 🎵 TikTok, <<: *pr}
  - {name: 🎥 NETFLIX, <<: *pr}
  - {name: 🏰 Disney, <<: *pr}
  - {name: 📺 HBO, <<: *pr}
  - {name: 📽️ Emby, <<: *pr}
  - {name: 📸 Instagram, <<: *pr}
  - {name: 💬 WhatsApp, <<: *pr}
  - {name: 🖼️ Facebook, <<: *pr}
  - {name: 🐬 OneDrive, <<: *pr_c}
  - {name: 🪟 Microsoft, <<: *pr_c}
  - {name: ✈️ Speedtest, <<: *pr}
  - {name: 💶 PayPal, <<: *pr}
  - {name: 🎮 GameDownload, <<: *pr_c}
  - {name: 🎮 Steam, <<: *pr}
  - {name: 🎮 Game, <<: *pr}
  - {name: 🍎 Apple, <<: *pr_c}
  - {name: 🎯 直连, <<: *pr_c}
  - {name: 🐟 漏网之鱼, type: select, include-all: true, proxies: [🚀 默认代理, ♻️ 香港自动, ♻️ 日本自动, ♻️ 美国自动, ♻️ 新国自动, ♻️ 韩国自动, ♻️ 台湾自动, ♻️ 欧洲自动, ♻️ 自动选择, ⭐ 香港智能, ⭐ 日本智能, ⭐ 美国智能, ⭐ 新国智能, ⭐ 韩国智能, ⭐ 台湾智能, ⭐ 欧洲智能, 🔒 港区-稳定IP, 🔒 日本-稳定IP, 🔒 美国-稳定IP, 🔒 新国-稳定IP, 🔒 韩国-稳定IP, 🔒 台湾-稳定IP, 🔒 欧洲-稳定IP, 🇭🇰 香港节点, 🇯🇵 日本节点, 🇸🇬 新国节点, 🇺🇲 美国节点, 🇰🇷 韩国节点, 🇹🇼 台湾节点, 🇩🇪🇫🇷🇬🇧 欧洲节点, 🔯 香港故转, 🔯 日本故转, 🔯 美国故转, 🔯 新国故转, 🔯 韩国故转, 🔯 台湾故转, 🔯 欧洲故转, 自建/家宽节点]}

  - {name: ♻️ 香港自动, type: url-test, include-all: true, tolerance: 20, interval: 300, filter: "(?=.*(港|HK|(?i)Hong))^((?!(台|日|韩|新|深|美|阿联酋|德国|土耳其|英国|俄罗斯|摩尔多瓦)).)*$"}
  - {name: ♻️ 日本自动, type: url-test, include-all: true, tolerance: 20, interval: 300, filter: "(?=.*(日|JP|(?i)Japan))^((?!(港|台|韩|新|美)).)*$" }
  - {name: ♻️ 美国自动, type: url-test, include-all: true, tolerance: 20, interval: 300, filter: "(?=.*(广美|美|US|纽约|波特兰|达拉斯|俄勒|凤凰城|费利蒙|拉斯|洛杉|圣何塞|圣克拉|西雅|芝加|🇺🇸|United States))^((?!(台|日|韩|新|亚美尼亚|洪都拉斯)).)*$"}
  - {name: ♻️ 新国自动, type: url-test, include-all: true, tolerance: 20, interval: 300, filter: "(?=.*(广新|新加坡|SG|坡|狮城|🇸🇬|Singapore)).*$"}
  - {name: ♻️ 韩国自动, type: url-test, include-all: true, tolerance: 20, interval: 300, filter: "(?=.*(广韩|韩国|韓國|KR|首尔|春川|🇰🇷|Korea)).*$"}
  - {name: ♻️ 台湾自动, type: url-test, include-all: true, tolerance: 20, interval: 300, filter: "(?=.*(广台|台湾|台灣|TW|Tai Wan|🇹🇼|Taiwan)).*$"}
  - {name: ♻️ 欧洲自动, type: url-test, include-all: true, tolerance: 20, interval: 300, filter: "(?=.*(欧|Europe|🇪🇺|Germany|France|Netherlands|Spain|Italy|Austria|Belgium|Bulgaria|Croatia|Cyprus|Czech|Denmark|Estonia|Finland|Greece|Hungary|Ireland|Latvia|Lithuania|Luxembourg|Malta|Poland|Portugal|Romania|Slovakia|Slovenia|Sweden|Russia|德国|法国|荷兰|西班牙|意大利|奥地利|比利时|保加利亚|克罗地亚|塞浦路斯|捷克|丹麦|爱沙尼亚|芬兰|希腊|匈牙利|爱尔兰|拉脱维亚|立陶宛|卢森堡|马耳他|波兰|葡萄牙|罗马尼亚|斯洛伐克|斯洛文尼亚|瑞典|俄罗斯|RU|🇷🇺)).*$"}
  - {name: ♻️ 自动选择, type: url-test, include-all: true, tolerance: 20, interval: 300, filter: "^((?!(直连)).)*$"}
  - {name: ⭐ 香港智能, type: smart, include-all: true, tolerance: 20, interval: 300, uselightgbm: true, collectdata: true, filter: "(?=.*(港|HK|(?i)Hong))^((?!(台|日|韩|新|深|美|阿联酋|德国|土耳其|英国|俄罗斯|摩尔多瓦)).)*$", url: "http://www.gstatic.com/generate_204", lazy: true, persistent: true}
  - {name: ⭐ 日本智能, type: smart, include-all: true, tolerance: 20, interval: 300, uselightgbm: true, collectdata: true, filter: "(?=.*(日|JP|(?i)Japan))^((?!(港|台|韩|新|美)).)*$", url: "http://www.gstatic.com/generate_204", lazy: true, persistent: true}
  - {name: ⭐ 美国智能, type: smart, include-all: true, tolerance: 20, interval: 300, uselightgbm: true, collectdata: true, filter: "(?=.*(广美|美|US|纽约|波特兰|达拉斯|俄勒|凤凰城|费利蒙|拉斯|洛杉|圣何塞|圣克拉|西雅|芝加|🇺🇸|United States))^((?!(台|日|韩|新|亚美尼亚|洪都拉斯)).)*$", url: "http://www.gstatic.com/generate_204", lazy: true, persistent: true}
  - {name: ⭐ 新国智能, type: smart, include-all: true, tolerance: 20, interval: 300, uselightgbm: true, collectdata: true, filter: "(?=.*(广新|新加坡|SG|坡|狮城|🇸🇬|Singapore)).*$", url: "http://www.gstatic.com/generate_204", lazy: true, persistent: true}
  - {name: ⭐ 韩国智能, type: smart, include-all: true, tolerance: 20, interval: 300, uselightgbm: true, collectdata: true, filter: "(?=.*(广韩|韩国|韓國|KR|首尔|春川|🇰🇷|Korea)).*$", url: "http://www.gstatic.com/generate_204", lazy: true, persistent: true}
  - {name: ⭐ 台湾智能, type: smart, include-all: true, tolerance: 20, interval: 300, uselightgbm: true, collectdata: true, filter: "(?=.*(广台|台湾|台灣|TW|Tai Wan|🇹🇼|Taiwan)).*$", url: "http://www.gstatic.com/generate_204", lazy: true, persistent: true}
  - {name: ⭐ 欧洲智能, type: smart, include-all: true, tolerance: 20, interval: 300, uselightgbm: true, collectdata: true, filter: "(?=.*(欧|Europe|🇪🇺|Germany|France|Netherlands|Spain|Italy|Austria|Belgium|Bulgaria|Croatia|Cyprus|Czech|Denmark|Estonia|Finland|Greece|Hungary|Ireland|Latvia|Lithuania|Luxembourg|Malta|Poland|Portugal|Romania|Slovakia|Slovenia|Sweden|Russia|德国|法国|荷兰|西班牙|意大利|奥地利|比利时|保加利亚|克罗地亚|塞浦路斯|捷克|丹麦|爱沙尼亚|芬兰|希腊|匈牙利|爱尔兰|拉脱维亚|立陶宛|卢森堡|马耳他|波兰|葡萄牙|罗马尼亚|斯洛伐克|斯洛文尼亚|瑞典|俄罗斯|RU|🇷🇺)).*$", url: "http://www.gstatic.com/generate_204", lazy: true, persistent: true}

# 用于IP敏感的专用嵌套策略组，故障转移策略组嵌套 手选+smart策略组。缺点：最长中断两分钟多。
  - {name: 🔒 港区-稳定IP, type: fallback, tolerance: 30, interval: 150, lazy: false, proxies: [🇭🇰 香港节点, ⭐ 香港智能]}
  - {name: 🔒 日本-稳定IP, type: fallback, tolerance: 30, interval: 150, lazy: false, proxies: [🇯🇵 日本节点, ⭐ 日本智能]}
  - {name: 🔒 美国-稳定IP, type: fallback, tolerance: 30, interval: 150, lazy: false, proxies: [🇺🇲 美国节点, ⭐ 美国智能]}
  - {name: 🔒 新国-稳定IP, type: fallback, tolerance: 30, interval: 150, lazy: false, proxies: [🇸🇬 新国节点, ⭐ 新国智能]}
  - {name: 🔒 韩国-稳定IP, type: fallback, tolerance: 30, interval: 150, lazy: false, proxies: [🇰🇷 韩国节点, ⭐ 韩国智能]}
  - {name: 🔒 台湾-稳定IP, type: fallback, tolerance: 30, interval: 150, lazy: false, proxies: [🇹🇼 台湾节点, ⭐ 台湾智能]}
  - {name: 🔒 欧洲-稳定IP, type: fallback, tolerance: 30, interval: 150, lazy: false, proxies: [🇩🇪🇫🇷🇬🇧 欧洲节点, ⭐ 欧洲智能]}

# 手选策略组选择最快的节点 ，配合稳定IP策略组使用。
  - {name: 🇭🇰 香港节点, type: select, include-all: true, filter: "(?=.*(港|HK|(?i)Hong))^((?!(台|日|韩|新|深|美|阿联酋|德国|土耳其|英国|俄罗斯|摩尔多瓦)).)*$"}
  - {name: 🇯🇵 日本节点, type: select, include-all: true, filter: "(?i)日|jp|japan"}
  - {name: 🇺🇲 美国节点, type: select, include-all: true, filter: "(?=.*(广美|美|US|纽约|波特兰|达拉斯|俄勒|凤凰城|费利蒙|拉斯|洛杉|圣何塞|圣克拉|西雅|芝加|🇺🇸|United States))^((?!(台|日|韩|新|亚美尼亚|洪都拉斯)).)*$"}
  - {name: 🇸🇬 新国节点, type: select, include-all: true, filter: "(?=.*(广新|新加坡|SG|坡|狮城|🇸🇬|Singapore)).*$"}
  - {name: 🇰🇷 韩国节点, type: select, include-all: true, filter: "(?=.*(广韩|韩国|韓國|KR|首尔|春川|🇰🇷|Korea)).*$"}
  - {name: 🇹🇼 台湾节点, type: select, include-all: true, filter: "(?i)台|tw|taiwan"}
  - {name: 🇩🇪🇫🇷🇬🇧 欧洲节点, type: select, include-all: true, filter: "(?i)欧|europe|germany|france|netherlands|spain|italy|austria|belgium|bulgaria|croatia|cyprus|czech|denmark|estonia|finland|greece|hungary|ireland|latvia|lithuania|luxembourg|malta|poland|portugal|romania|slovakia|slovenia|sweden|russia|德国|法国|荷兰|西班牙|意大利|奥地利|比利时|保加利亚|克罗地亚|塞浦路斯|捷克|丹麦|爱沙尼亚|芬兰|希腊|匈牙利|爱尔兰|拉脱维亚|立陶宛|卢森堡|马耳他|波兰|葡萄牙|罗马尼亚|斯洛伐克|斯洛文尼亚|瑞典|俄罗斯|ru|🇷🇺"}

  - {name: 🔯 香港故转, type: fallback, include-all: true, tolerance: 20, interval: 300, filter: "(?=.*(港|HK|(?i)Hong))^((?!(台|日|韩|新|深|美|阿联酋|德国|土耳其|英国|俄罗斯|摩尔多瓦)).)*$"}
  - {name: 🔯 日本故转, type: fallback, include-all: true, tolerance: 20, interval: 300, filter: "(?=.*(日|JP|(?i)Japan))^((?!(港|台|韩|新|美)).)*$" }
  - {name: 🔯 美国故转, type: fallback, include-all: true, tolerance: 20, interval: 300, filter: "(?=.*(广美|美|US|纽约|波特兰|达拉斯|俄勒|凤凰城|费利蒙|拉斯|洛杉|圣何塞|圣克拉|西雅|芝加|🇺🇸|United States))^((?!(台|日|韩|新|亚美尼亚|洪都拉斯)).)*$"}
  - {name: 🔯 新国故转, type: fallback, include-all: true, tolerance: 20, interval: 300, filter: "(?=.*(广新|新加坡|SG|坡|狮城|🇸🇬|Singapore)).*$"}
  - {name: 🔯 韩国故转, type: fallback, include-all: true, tolerance: 20, interval: 300, filter: "(?=.*(广韩|韩国|韓國|KR|首尔|春川|🇰🇷|Korea)).*$"}
  - {name: 🔯 台湾故转, type: fallback, include-all: true, tolerance: 20, interval: 300, filter: "(?=.*(广台|台湾|台灣|TW|Tai Wan|🇹🇼|Taiwan)).*$"}
  - {name: 🔯 欧洲故转, type: fallback, include-all: true, tolerance: 20, interval: 300, filter: "(?=.*(欧|Europe|🇪🇺|Germany|France|Netherlands|Spain|Italy|Austria|Belgium|Bulgaria|Croatia|Cyprus|Czech|Denmark|Estonia|Finland|Greece|Hungary|Ireland|Latvia|Lithuania|Luxembourg|Malta|Poland|Portugal|Romania|Slovakia|Slovenia|Sweden|Russia|德国|法国|荷兰|西班牙|意大利|奥地利|比利时|保加利亚|克罗地亚|塞浦路斯|捷克|丹麦|爱沙尼亚|芬兰|希腊|匈牙利|爱尔兰|拉脱维亚|立陶宛|卢森堡|马耳他|波兰|葡萄牙|罗马尼亚|斯洛伐克|斯洛文尼亚|瑞典|俄罗斯|RU|🇷🇺)).*$"}
  - {name: 🌍 其他节点, type: select, include-all: true, filter: "^((?!(直连|拒绝|广港|香港|HK|Hong Kong|🇭🇰|HongKong|广台|台湾|台灣|TW|Tai Wan|🇹🇼|Taiwan|广日|日本|JP|川日|东京|大阪|泉日|埼玉|沪日|深日|🇯🇵|Japan|广新|新加坡|SG|坡|狮城|🇸🇬|Singapore|广韩|韩国|韓國|KR|首尔|春川|🇰🇷|Korea|广美|美|US|纽约|波特兰|达拉斯|俄勒|凤凰城|费利蒙|拉斯|洛杉|圣何塞|圣克拉|西雅|芝加|🇺🇸|United States|欧|Europe|Germany|France|Netherlands|Spain|Italy|Austria|Belgium|Bulgaria|Croatia|Cyprus|Czech|Denmark|Estonia|Finland|Greece|Hungary|Ireland|Latvia|Lithuania|Luxembourg|Malta|Poland|Portugal|Romania|Slovakia|Slovenia|Sweden|Russia|德国|法国|荷兰|西班牙|意大利|奥地利|比利时|保加利亚|克罗地亚|塞浦路斯|捷克|丹麦|爱沙尼亚|芬兰|希腊|匈牙利|爱尔兰|拉脱维亚|立陶宛|卢森堡|马耳他|波兰|葡萄牙|罗马尼亚|斯洛伐克|斯洛文尼亚|瑞典|亚美尼亚|洪都拉斯|俄罗斯|RU|🇷🇺)).)*$"}
  - {name: 自建/家宽节点, type: select, include-all: true, filter: "(?i)(自建|CF|The_house|private|home)", icon: "https://pub-8feead0908f649a8b94397f152fb9cba.r2.dev/private_node.png"}
  - {name: 🌐 全部节点, type: select, include-all: true}

# 规则匹配
# 此规则部分没有做防泄露处理，因为弊严重大于利！
rules:
  - DOMAIN-SUFFIX,qichiyu.com,🚀 默认代理
  - RULE-SET,private_domain,直连
  - RULE-SET,apple_domain,🍎 Apple
  - RULE-SET,proxylite,🚀 默认代理
  - RULE-SET,ai,🤖 Ai
  - RULE-SET,telegram_domain,📲 Telegram
  - RULE-SET,youtube_domain,📹 YouTube
  - RULE-SET,google_domain,🍀 Google
  - RULE-SET,Twitter_domain,🐦 Twitter(X)
  - RULE-SET,github_domain,👨🏿‍💻 GitHub
  - RULE-SET,tiktok_domain,🎵 TikTok
  - RULE-SET,netflix_domain,🎥 NETFLIX
  - RULE-SET,Disney_domain,🏰 Disney
  - RULE-SET,HBO_domain,📺 HBO
  - RULE-SET,Emby_domain-1,📽️ Emby
  # - RULE-SET,Emby_domain-2,📽️ Emby
  # - RULE-SET,Emby_domain-3,📽️ Emby
  # - RULE-SET,Emby_domain-4,📽️ Emby
  - RULE-SET,Instagram_domain,📸 Instagram
  - RULE-SET,WhatsApp_domain,💬 WhatsApp
  - RULE-SET,Facebook_domain,🖼️ Facebook
  - RULE-SET,GameDownload_domain-1,🎮 GameDownload
  - RULE-SET,GameDownload_domain-2,🎮 GameDownload
  - RULE-SET,Steam_domain,🎮 Steam
  - RULE-SET,Epic_domain,🎮 Game
  - RULE-SET,Blizzard_domain,🎮 Game
  - RULE-SET,UBI_domain,🎮 Game
  - RULE-SET,Sony_domain,🎮 Game
  - RULE-SET,Nintend_domain,🎮 Game
  - RULE-SET,onedrive_domain,🐬 OneDrive
  - RULE-SET,microsoft_domain,🪟 Microsoft
  - RULE-SET,speedtest_domain,✈️ Speedtest
  - RULE-SET,paypal_domain,💶 PayPal
  - RULE-SET,gfw_domain,🚀 默认代理
  - RULE-SET,geolocation-!cn,🚀 默认代理
  - RULE-SET,cn_domain,🎯 直连
  - RULE-SET,google_ip,🍀 Google,no-resolve
  - RULE-SET,netflix_ip,🎥 NETFLIX,no-resolve
  - RULE-SET,telegram_ip,📲 Telegram,no-resolve
  - RULE-SET,cn_ip,🎯 直连
  - MATCH,🐟 漏网之鱼

# 规则集
rule-anchor:
  ip: &ip {type: http, interval: 86400, behavior: ipcidr, format: mrs}
  domain: &domain {type: http, interval: 86400, behavior: domain, format: mrs}
  class: &class {type: http, interval: 86400, behavior: classical, format: text}

rule-providers:
  private_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/private.mrs"}
  proxylite: { <<: *class, url: "https://raw.githubusercontent.com/qichiyuhub/rule/refs/heads/main/proxy.list"}
  ai: {  <<: *domain, url: "https://github.com/MetaCubeX/meta-rules-dat/raw/refs/heads/meta/geo/geosite/category-ai-!cn.mrs" }
  youtube_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/youtube.mrs"}
  google_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/google.mrs"}
  Twitter_domain: {<<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/x.mrs"}
  Disney_domain: {<<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/disney.mrs"}
  Instagram_domain: {<<: *domain, url: "https://github.com/MetaCubeX/meta-rules-dat/raw/refs/heads/meta/geo/geosite/instagram.mrs"}
  WhatsApp_domain: {<<: *class, url: "https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/refs/heads/master/rule/Clash/Whatsapp/Whatsapp.list"}
  Facebook_domain: {<<: *domain, url: "https://github.com/MetaCubeX/meta-rules-dat/raw/refs/heads/meta/geo/geosite/facebook.mrs"}
  GameDownload_domain-1: {<<: *class, url: "https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/refs/heads/master/rule/Clash/Game/GameDownload/GameDownload.list"}
  GameDownload_domain-2: {<<: *class, url: "https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/refs/heads/master/rule/Clash/SteamCN/SteamCN.list"}
  Steam_domain: {<<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/steam.mrs"}
  Epic_domain: {<<: *class, url: "https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/Epic/Epic.list"}
  EA_domain: {<<: *class, url: "https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/EA/EA.list"}
  Blizzard_domain: {<<: *class, url: "https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/Blizzard/Blizzard.list"}
  UBI_domain: {<<: *class, url: "https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/UBI/UBI.list"}
  Sony_domain: {<<: *class, url: "https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/Sony/Sony.list"}
  Nintend_domain: {<<: *class, url: "https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/Nintendo/Nintendo.list"}
  github_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/github.mrs"}
  telegram_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/telegram.mrs"}
  netflix_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/netflix.mrs"}
  HBO_domain: {<<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/hbo.mrs"}
  Emby_domain-1: {<<: *class, url: "https://raw.githubusercontent.com/cendon-999/Rules/refs/heads/main/rules/Domain/emby.list"}
  # Emby_domain-2: {<<: *class, url: "https://raw.githubusercontent.com/666OS/YYDS/refs/heads/main/mihomo/rules/emby.list"}
  # Emby_domain-3: {<<: *class, url: "https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/refs/heads/master/rule/Clash/Emby/Emby.list"}
  # Emby_domain-4: {<<: *class, url: "https://raw.githubusercontent.com/ddgksf2013/Filter/refs/heads/master/Emby.list"}
  paypal_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/paypal.mrs"}
  onedrive_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/onedrive.mrs"}
  microsoft_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/microsoft.mrs"}
  apple_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/apple-cn.mrs"}
  speedtest_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/ookla-speedtest.mrs"}
  tiktok_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/tiktok.mrs"}
  gfw_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/gfw.mrs"}
  geolocation-!cn: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/geolocation-!cn.mrs"}
  cn_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/cn.mrs"}
  cn_ip: { <<: *ip, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geoip/cn.mrs"}
  google_ip: { <<: *ip, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geoip/google.mrs"}
  telegram_ip: { <<: *ip, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geoip/telegram.mrs"}
  netflix_ip: { <<: *ip, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geoip/netflix.mrs"}
  #fakeip_filter_domain: { <<: *domain, url: "https://cdn.jsdelivr.net/gh/juewuy/ShellCrash@dev/public/fake_ip_filter.list"}
  fake-ip-filter:
    type: http
    behavior: domain
    format: text
    interval: 86400
    url: https://raw.githubusercontent.com/juewuy/ShellCrash/refs/heads/dev/public/fake_ip_filter.list
    path: ./ruleset/fake_ip_filter.list

